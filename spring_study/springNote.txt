2023.08.29
OOP의 4가지 특징 : 추상화, 상속, 다형성, 캡슐화
DAO(Data Access Object) : DB를 사용해 데이터를 조회하거나 조작하는 기능을 전담하도록  만든 오브젝트
Refactorying : 외부의 동작방식에는 변화 없이 내부 구조를 변경해서 재구성하는 작업 또는 기술
디자인 패턴 : 소프트웨어 설계 시 특정 상황에서 자주 만나는 문제를 해결하기 위해 사용할 수 있는 재사용 가능한 솔루션.
  -템플릿 메소드 패턴 : 변하지 않는 기능은 슈퍼클래스에 만들어두고 자주 변경되면 확장할 기능은 서브클래스에서 만듦.
                        슈퍼클래스에서는 미리 추상 메소드 또는 오버라이드 가능한 메소드를 정의해두고 이를 활용해 코드의 기본 알고리즘을 담고있는 템플릿 메소드를 만듦.
                        슈퍼클래스에서 디폴트 기능을 정의해두거나 비워뒀다가 서브클래스에서 선택적으로 오버라이드 할 수 있도록 만들어둔 메소드는 훅 메소드.
  -팩토리 메소드 패턴 : 슈퍼클래스 코드에서는 서브클래스에서 구현할 메소드를 호출해서 필요한 타입의 오브젝트를 가져와 사용.
                        슈퍼클래스는 서브클래스에서 정확히 어떤 클래스의 오브젝트를 만들어 리턴할지 관심 없음.
객체지향 설계 원칙(SOLID)
  -SRP(The Single Responsibility Principle) : 단일 책임 원칙
    1. 하나의 클래스는 하나의 기능을 담당하여 하나의 책임을 수행해야 함.
  -OCP(The Open Closed Principle) : 개방 폐쇄 원칙
    1. 확장에는 열려있어야 하나, 수정에는 닫혀 있어야 함.
    2. 추상화를 통한 관계 구축을 권장한다는 의미.
  -LSP(The Liskov Substitution Principle) :리스코프 치환 원칙
    1. 서브클래스는 항상 슈퍼클래스로 교체할 수 있어야 함.
    2. 따라서 슈퍼클래스의 메소드를 오버라이드 할 때 슈퍼클래스와 동일한 수준의 메소드를 기대하고 사용하는 프로그램에서 예기치 못 한 문제가 발생할 수 있으므로 주의해야 함.
  -ISP(The Interface Segregation Principle) : 인터페이스 분리 원칙
    1. 인터페이스를 처음 설계 할 때부터 그 목적에 맞게 잘 설계해야 함.
    2. 한 번 분리하여 정리해둔 인터페이스를 후에 또다시 수정하여 분리하면 안됨.
  -DIP(The Dependency Inversion Principle) : 의존관계 역전 원칙
    1. 어떤 클래스를 참조하고 싶다면 그 상위요소(추상클래스 또는 인터페이스)를 참조해야 함.
    2. 즉, 쉽게 변화하는 것을 참조하는 것이 아닌 변하지 않을 것을 참조해야 함.